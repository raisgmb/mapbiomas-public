rm(list=ls())
## carregar bibliotecas
library(corrplot)
library(ggplot2)
library (ggfortify)
library(dplyr)
## carregar biblioteca espectral
data <- read.table("2-txt/spectral_signatures.txt")
##collect subsample
# data2 <- subset (data, class == "Outros")
sample_data <- data[sample(1:nrow(data), 1000),]  #1988 numero de rows nrow(data2)
##
x11()
dataValues <- na.omit(mutate_all(sample_data[2:153], function(x) as.numeric(as.character(x))))
data_cor <- cor(dataValues)
corrplot(data_cor, method="color", type="upper", tl.cex=0.7, title= "Clases generales")
dataValues <- na.omit(mutate_all(sample_data[2:10], function(x) as.numeric(as.character(x))))
data_cor <- cor(dataValues)
corrplot(data_cor, method="color", type="upper", tl.cex=0.7, title= "Clases generales")
# setwd('E:/4_4_MapbiomasPERU_Pacifico/Importancia_Variables/P02_txt')
dir()
rm(list=ls())
## select feature space
## Dhemerson Conciani (dhemerson.costa@ipam.org.br)
## Ajust: EYTC -IBC-PERU
## carregar bibliotecas
library (AppliedPredictiveModeling)
library (caret)
library (ggplot2)
library (pROC)
library (doParallel)
library (dplyr)
library (randomForest)
library (reshape2)
## configure parallel processing
cl <- makePSOCKcluster(5)
registerDoParallel(cl)
## parametros de treinamento
n_models <- 1  ## 400
n_samples <- 195
## read table
data <- na.omit(read.table("2-txt/spectral_signatures.txt"))
## plot frequencies
x11()
ggplot(data.frame(data$class), aes(x=data$class)) +
geom_bar() + coord_flip() + theme_classic()
count(data, class)
## criar um dataset por classe
if(TRUE){
Bosque <- subset (data, class== "Bosque")
Manglar <- subset (data, class== "Manglar")
Bosque_Inundable <- subset (data, class== "Bosque_Inundable")
Formación_Natural_No_Forestal_Inundable <- subset (data, class== "Formación_Natural_No_Forestal_Inundable")
Formación_Campestre <- subset (data, class== "Formación_Campestre")
Afloramiento_Rocoso <- subset (data, class== "Afloramiento_Rocoso")
Otra_Formación_Natural_No_Forestal <- subset (data, class== "Otra_Formación_Natural_No_Forestal")
Uso_agropecuario <- subset (data, class== "Uso_agropecuario")
Pastos <- subset (data, class== "Pastos")
Agricultura <- subset (data, class== "Agricultura")
Mosaico_de_Agricultura <- subset (data, class== "Mosaico_de_Agricultura")
Area_sin_vegetacion <- subset (data, class== "Area_sin_vegetacion")
Urbana <- subset (data, class== "Urbana")
Otras_areas_sin_vegetacion <- subset (data, class== "Otras_areas_sin_vegetacion")
Mineria <- subset (data, class== "Mineria")
Cuerpo_de_agua <- subset (data, class== "Cuerpo_de_agua")
Glaciar <- subset (data, class== "Glaciar")
}
if(TRUE){
## loop for vai começar daqui (treinar multilpos modelos e extrair importancia)
## criar recipe vazio
recipe <- as.data.frame(NULL)
for (i in 1:n_models) {
print (paste0(i/n_models*100, " %"))
## sortear amostras (400 por classe)
sample_Bosque <- Bosque[sample(1:nrow(Bosque), n_samples),]
sample_Manglar <- Manglar[sample(1:nrow(Manglar), n_samples),]
# sample_Bosque_Inundable <- Bosque_Inundable[sample(1:nrow(Bosque_Inundable), n_samples),]
sample_Formación_Natural_No_Forestal_Inundable <- Formación_Natural_No_Forestal_Inundable[sample(1:nrow(Formación_Natural_No_Forestal_Inundable), n_samples),]
# sample_Formación_Campestre <- Formación_Campestre[sample(1:nrow(Formación_Campestre), n_samples),]
# sample_Afloramiento_Rocoso <- Afloramiento_Rocoso[sample(1:nrow(Afloramiento_Rocoso), n_samples),]
sample_Otra_Formación_Natural_No_Forestal <- Otra_Formación_Natural_No_Forestal[sample(1:nrow(Otra_Formación_Natural_No_Forestal), n_samples),]
# sample_Uso_agropecuario <- Uso_agropecuario[sample(1:nrow(Uso_agropecuario), n_samples),]
# sample_Pastos <- Pastos[sample(1:nrow(Pastos), n_samples),]
# sample_Agricultura <- Agricultura[sample(1:nrow(Agricultura), n_samples),]
sample_Mosaico_de_Agricultura <- Mosaico_de_Agricultura[sample(1:nrow(Mosaico_de_Agricultura), n_samples),]
sample_Area_sin_vegetacion <- Area_sin_vegetacion[sample(1:nrow(Area_sin_vegetacion), n_samples),]
sample_Urbana <- Urbana[sample(1:nrow(Urbana), n_samples),]
# sample_Otras_areas_sin_vegetacion <- Otras_areas_sin_vegetacion[sample(1:nrow(Otras_areas_sin_vegetacion), n_samples),]
sample_Mineria <- Mineria[sample(1:nrow(Mineria), n_samples),]
sample_Cuerpo_de_agua <- Cuerpo_de_agua[sample(1:nrow(Cuerpo_de_agua), n_samples),]
# sample_Glaciar <- Glaciar[sample(1:nrow(Glaciar), n_samples),]
## preparar dataset para treino
samples <- rbind (sample_Bosque,
sample_Manglar,
# sample_Bosque_Inundable,
sample_Formación_Natural_No_Forestal_Inundable,
# sample_Formación_Campestre,
# sample_Afloramiento_Rocoso,
sample_Otra_Formación_Natural_No_Forestal,
# sample_Uso_agropecuario,
# sample_Pastos,
# sample_Agricultura,
sample_Mosaico_de_Agricultura,
sample_Area_sin_vegetacion,
sample_Urbana,
# sample_Otras_areas_sin_vegetacion,
sample_Mineria,
sample_Cuerpo_de_agua
# sample_Glaciar
)
## separar variaveis de labels
dataValues <- samples[2:153]
dataClass <- samples[1]
## converter em numerico
dataValues <- mutate_all(dataValues, function(x) as.numeric(as.character(x)))
## control
control <- trainControl(method="repeatedcv", number=5, repeats=3, classProbs=TRUE)
## treinar modelo
rfModel <- randomForest(dataValues, as.factor(dataClass[,1]),
ntree= 100,
mtry= 4,
trControl=control,
preProc = c ("center", "scale"),
allowParallel = TRUE)
temp <- as.data.frame(importance(rfModel))
temp$run <- i
temp$variable <- row.names(temp)
row.names(temp) <- 1:152
recipe <- rbind (temp, recipe)
}
recipe$level <- "geral"
## treinar modelos apenas com variaveis nativas
## criar recipe vazio
recipe2 <- as.data.frame(NULL)
for (i in 1:n_models) {
print (paste0(i/n_models*100, " %"))
## sortear amostras (400 por classe)
sample_Bosque <- Bosque[sample(1:nrow(Bosque), n_samples),]
# sample_Manglar <- Manglar[sample(1:nrow(Manglar), n_samples),]
# sample_Bosque_Inundable <- Bosque_Inundable[sample(1:nrow(Bosque_Inundable), n_samples),]
sample_Formación_Natural_No_Forestal_Inundable <- Formación_Natural_No_Forestal_Inundable[sample(1:nrow(Formación_Natural_No_Forestal_Inundable), n_samples),]
# sample_Formación_Campestre <- Formación_Campestre[sample(1:nrow(Formación_Campestre), n_samples),]
# sample_Afloramiento_Rocoso <- Afloramiento_Rocoso[sample(1:nrow(Afloramiento_Rocoso), n_samples),]
sample_Otra_Formación_Natural_No_Forestal <- Otra_Formación_Natural_No_Forestal[sample(1:nrow(Otra_Formación_Natural_No_Forestal), n_samples),]
# sample_Uso_agropecuario <- Uso_agropecuario[sample(1:nrow(Uso_agropecuario), n_samples),]
# sample_Pastos <- Pastos[sample(1:nrow(Pastos), n_samples),]
# sample_Agricultura <- Agricultura[sample(1:nrow(Agricultura), n_samples),]
# sample_Mosaico_de_Agricultura <- Mosaico_de_Agricultura[sample(1:nrow(Mosaico_de_Agricultura), n_samples),]
# sample_Area_sin_vegetacion <- Area_sin_vegetacion[sample(1:nrow(Area_sin_vegetacion), n_samples),]
# sample_Urbana <- Urbana[sample(1:nrow(Urbana), n_samples),]
# sample_Otras_areas_sin_vegetacion <- Otras_areas_sin_vegetacion[sample(1:nrow(Otras_areas_sin_vegetacion), n_samples),]
# sample_Mineria <- Mineria[sample(1:nrow(Mineria), n_samples),]
# sample_Cuerpo_de_agua <- Cuerpo_de_agua[sample(1:nrow(Cuerpo_de_agua), n_samples),]
# sample_Glaciar <- Glaciar[sample(1:nrow(Glaciar), n_samples),]
## preparar dataset para treino
samples <- rbind (sample_Bosque,
# sample_Manglar,
# sample_Bosque_Inundable,
sample_Formación_Natural_No_Forestal_Inundable,
# sample_Formación_Campestre,
# sample_Afloramiento_Rocoso,
sample_Otra_Formación_Natural_No_Forestal
# sample_Uso_agropecuario,
# sample_Pastos,
# sample_Agricultura,
# sample_Mosaico_de_Agricultura,
# sample_Area_sin_vegetacion,
# sample_Urbana,
# sample_Otras_areas_sin_vegetacion
# sample_Mineria,
# sample_Cuerpo_de_agua
# sample_Glaciar
)
# write.table(samples, "P02_txt/samples.csv")
## separar variaveis de labels
dataValues <- samples[2:153]
dataClass <- samples[1]
## converter em numerico
dataValues <- mutate_all(dataValues, function(x) as.numeric(as.character(x)))
## control
control <- trainControl(method="repeatedcv", number=5, repeats=3, classProbs=TRUE)
dataValues <- droplevels (dataValues)  #aqui  eytc
dataClass <- droplevels (dataClass)    #aqui  eytc
## treinar modelo
rfModel <- randomForest(dataValues, as.factor(dataClass[,1]),
ntree= 100,
mtry= 4,
trControl=control,
preProc = c ("center", "scale"),
allowParallel = TRUE)
temp <- as.data.frame(importance(rfModel))
temp$run <- i
temp$variable <- row.names(temp)
row.names(temp) <- 1:152
recipe2 <- rbind (temp, recipe2)
}
recipe2$level <- "native"
## Floresta vs. all
recipe3 <- as.data.frame(NULL)
data2 <- rbind (Mosaico_de_Agricultura, Formación_Natural_No_Forestal_Inundable, Formación_Campestre, Otra_Formación_Natural_No_Forestal)
data2$class <- "Outros"
for (i in 1:n_models) {
print (paste0(i/n_models*100, " %"))
## sortear amostras (400 por classe)
sample_Bosque <- Bosque[sample(1:nrow(Bosque), n_samples),]
sample_outros <- data2[sample(1:nrow(data2), n_samples),]
## preparar dataset para treino
samples <- rbind (sample_Bosque,
sample_outros
)
# write.table(samples, "P02_txt/samples.csv")
## separar variaveis de labels
dataValues <- samples[2:153]
dataClass <- samples[1]
## converter em numerico
dataValues <- mutate_all(dataValues, function(x) as.numeric(as.character(x)))
## control
control <- trainControl(method="repeatedcv", number=5, repeats=3, classProbs=TRUE)
dataValues <- droplevels (dataValues)  #aqui  eytc
dataClass <- droplevels (dataClass)    #aqui  eytc
## treinar modelo
rfModel <- randomForest(dataValues, as.factor(dataClass[,1]),
ntree= 100,
mtry= 4,
trControl=control,
preProc = c ("center", "scale"),
allowParallel = TRUE)
temp <- as.data.frame(importance(rfModel))
temp$run <- i
temp$variable <- row.names(temp)
row.names(temp) <- 1:152
recipe3 <- rbind (temp, recipe3)
}
recipe3$level <- "forest"
## Otra_Formación_Natural_No_Forestal vs. all
recipe4 <- as.data.frame(NULL)
data3 <- rbind (Mosaico_de_Agricultura, Formación_Natural_No_Forestal_Inundable, Formación_Campestre)
data3$class <- "Outros"
for (i in 1:n_models) {
print (paste0(i/n_models*100, " %"))
## sortear amostras (400 por classe)
sample_Otra_Formación_Natural_No_Forestal <- Otra_Formación_Natural_No_Forestal[sample(1:nrow(Otra_Formación_Natural_No_Forestal), n_samples),]
sample_outros <- data3[sample(1:nrow(data3), n_samples),]
## preparar dataset para treino
samples <- rbind (sample_Otra_Formación_Natural_No_Forestal,
sample_outros
)
# write.table(samples, "P02_txt/samples.csv")
## separar variaveis de labels
dataValues <- samples[2:153]
dataClass <- samples[1]
## converter em numerico
dataValues <- mutate_all(dataValues, function(x) as.numeric(as.character(x)))
## control
control <- trainControl(method="repeatedcv", number=5, repeats=3, classProbs=TRUE)
dataValues <- droplevels (dataValues)  #aqui  eytc
dataClass <- droplevels (dataClass)    #aqui  eytc
## treinar modelo
rfModel <- randomForest(dataValues, as.factor(dataClass[,1]),
ntree= 100,
mtry= 4,
trControl=control,
preProc = c ("center", "scale"),
allowParallel = TRUE)
temp <- as.data.frame(importance(rfModel))
temp$run <- i
temp$variable <- row.names(temp)
row.names(temp) <- 1:152
recipe4 <- rbind (temp, recipe4)
}
## exportar
recipe4$level <- "OFNNF"
## Mosaico_de_Agricultura vs. all
recipe5 <- as.data.frame(NULL)
data4 <- rbind (Bosque, Formación_Natural_No_Forestal_Inundable, Formación_Campestre, Otra_Formación_Natural_No_Forestal)
data4$class <- "Outros"
for (i in 1:n_models) {
print (paste0(i/n_models*100, " %"))
## sortear amostras (400 por classe)
sample_Mosaico_de_Agricultura <- Mosaico_de_Agricultura[sample(1:nrow(Mosaico_de_Agricultura), n_samples),]
sample_outros <- data4[sample(1:nrow(data4), n_samples),]
## preparar dataset para treino
samples <- rbind (sample_Mosaico_de_Agricultura,
sample_outros
)
# write.table(samples, "P02_txt/samples.csv")
## separar variaveis de labels
dataValues <- samples[2:153]
dataClass <- samples[1]
## converter em numerico
dataValues <- mutate_all(dataValues, function(x) as.numeric(as.character(x)))
## control
control <- trainControl(method="repeatedcv", number=5, repeats=3, classProbs=TRUE)
dataValues <- droplevels (dataValues)  #aqui  eytc
dataClass <- droplevels (dataClass)    #aqui  eytc
## treinar modelo
rfModel <- randomForest(dataValues, as.factor(dataClass[,1]),
ntree= 100,
mtry= 4,
trControl=control,
preProc = c ("center", "scale"),
allowParallel = TRUE)
temp <- as.data.frame(importance(rfModel))
temp$run <- i
temp$variable <- row.names(temp)
row.names(temp) <- 1:152
recipe5 <- rbind (temp, recipe5)
}
## exportar
recipe5$level <- "Mosaico_de_Agricultura"
recipe_final <- rbind (recipe, recipe2, recipe3, recipe4, recipe5)
# write.table(recipe, "P02_txt/geral_models.txt")
write.table(recipe_final, "2-txt/importance.txt")
}
## select feature space
# setwd('E:/4_4_MapbiomasPERU_Pacifico/Importancia_Variables/P02_txt')
dir()
rm(list=ls())
## load libraries
library (ggplot2)
## load table
data <- read.table ('2-txt/importance.txt')
## load table
data <- read.table ('2-txt/importance.txt')
## calc statistics
## mediana
stat <- aggregate(x= data$MeanDecreaseGini,
by=list(variable= data$variable, level= data$level),
FUN="mean")
## Extrae 50 variables mas importantes para cada nível de experimento
recipe <- as.data.frame(NULL)
for (i in 1:length(unique(stat$level))) {
print (unique(stat$level)[i])
temp <- subset(stat, level==unique(stat$level)[i])
temp <- as.data.frame(temp[order(-temp$x),][1:50,]$variable)
temp$level <- unique(stat$level)[i]
recipe <- rbind (temp, recipe)
}
recipe
## calcular quantas vezes cada variavel aparece no top50
sum_importance <- as.data.frame(table(recipe))
colnames(sum_importance)[1] <- "variable"
colnames(sum_importance)[1] <- "variable"
sum_importance$level <- factor(sum_importance$level,
levels = c("Mosaico_de_Agricultura","OFNNF", "forest", "native", "geral")) #"florestal", "savanica", "campestre", "native",
## exportar variaveis selecionadas
write.table(unique(sum_importance$variable), "3-topV-plot/pre_selected_variables.txt")
# write.table(unique(recipe$`temp[order(-temp$x), ][1:50, ]$variable`), "P03_TopV_plot/pre_selected_variables.txt")
## Exportar top
top50 <- aggregate(sum_importance$Freq, by=list(sum_importance$variable), FUN="sum")
write.table(top50$Group.1[order(top50$x, decreasing=TRUE)][1:50], "3-topV-plot/top50.txt")
write.table(top50$Group.1[order(top50$x, decreasing=TRUE)][1:40], "3-topV-plot/top40.txt")
write.table(top50$Group.1[order(top50$x, decreasing=TRUE)][1:30], "3-topV-plot/top30.txt")
write.table(top50$Group.1[order(top50$x, decreasing=TRUE)][1:20], "3-topV-plot/top20.txt")
write.table(top50$Group.1[order(top50$x, decreasing=TRUE)][1:10], "3-topV-plot/top10.txt")
write.table(top50$Group.1[order(top50$x, decreasing=TRUE)][1:5], "3-topV-plot/top5.txt")
## select feature space
## Dhemerson Conciani (dhemerson.costa@ipam.org.br)
dir()
rm(list=ls())
## load libraries
library (ggplot2)
## load table
data <- read.table ('2-txt/importance.txt')
## calc statistics
## mediana
stat <- aggregate(x= data$MeanDecreaseGini,
by=list(variable= data$variable, level= data$level),
FUN="mean")
## extrair 50 variaveis mais importates para cada nível do experimento
recipe <- as.data.frame(NULL)
for (i in 1:length(unique(stat$level))) {
print (unique(stat$level)[i])
temp <- subset(stat, level==unique(stat$level)[i])
temp <- as.data.frame(temp[order(-temp$x),][1:50,]$variable)
temp$level <- unique(stat$level)[i]
recipe <- rbind (temp, recipe)
}
## calcular quantas vezes cada variavel aparece no top30
sum_importance <- as.data.frame(table(recipe))
colnames(sum_importance)[1] <- "variable"
sum_importance$level <- factor(sum_importance$level,
levels = c("Mosaico_de_Agricultura","OFNNF", "forest", "native", "geral"))
## plot
# x11()
dev.new()
png(file=paste('3-topV-plot/','plot_importance_geral','.png', sep=""),
width=2000, height=5000,  # tamaño
res = 350,  # nominal resoluction ppi
)
## geral
ggplot (data=subset(data, level== "geral"),
aes (x=reorder(variable, MeanDecreaseGini), y=MeanDecreaseGini)) +
geom_boxplot(outlier.size=-1, colour="gray20") +
geom_vline(xintercept=75.6, color="red", size=1) +
coord_flip() +
theme_classic() +
ggtitle('General (Native + Mos-Agr., Wat., Pas., Oth.)') +
xlab ('Predictor')
dev.off()
png(file=paste('3-topV-plot/','plot_importance_native','.png', sep=""),
width=2000, height=5000,  # tamaño
res = 350,  # nominal resoluction ppi
)
## apenas nativas
ggplot (data=subset(data, level== "native"),
aes (x=reorder(variable, MeanDecreaseGini), y=MeanDecreaseGini)) +
geom_boxplot(outlier.size=-1, colour= "tomato") +
geom_vline(xintercept=75.6, color="red", size=1) +
coord_flip() +
theme_classic() +
ggtitle('Native (Fo., Sa., Gr.)') +
xlab ('Predictor')
dev.off()
png(file=paste('3-topV-plot/','plot_importance_forest','.png', sep=""),
width=2000, height=5000,  # tamaño
res = 350,  # nominal resoluction ppi
)
## forest
ggplot (data=subset(data, level== "forest"),
aes (x=reorder(variable, MeanDecreaseGini), y=MeanDecreaseGini)) +
geom_boxplot(outlier.size=-1, col="darkgreen") +
geom_vline(xintercept=75.6, color="red", size=1) +
coord_flip() +
theme_classic() +
ggtitle('Forest vs. all') +
xlab ('Predictor')
dev.off()
png(file=paste('3-topV-plot/','plot_importance_OFNNF','.png', sep=""),
width=2000, height=5000,  # tamaño
res = 350,  # nominal resoluction ppi
)
## OFNNF
ggplot (data=subset(data, level== "OFNNF"),
aes (x=reorder(variable, MeanDecreaseGini), y=MeanDecreaseGini)) +
geom_boxplot(outlier.size=-1, col="#2C9B1C") +
geom_vline(xintercept=75.6, color="red", size=1) +
coord_flip() +
theme_classic() +
ggtitle('OFNNF vs. all') +
xlab ('Predictor')
dev.off()
png(file=paste('3-topV-plot/','plot_importance_Mosaico_de_Agricultura','.png', sep=""),
width=2000, height=5000,  # tamaño
res = 350,  # nominal resoluction ppi
)
## Mosaico_de_Agricultura
ggplot (data=subset(data, level== "Mosaico_de_Agricultura"),
aes (x=reorder(variable, MeanDecreaseGini), y=MeanDecreaseGini)) +
geom_boxplot(outlier.size=-1, col="#888766") +
geom_vline(xintercept=75.6, color="red", size=1) +
coord_flip() +
theme_classic() +
ggtitle('Mosaico_de_Agricultura vs. all') +
xlab ('Predictor')
dev.off()
png(file=paste('3-topV-plot/','plot_sum_importance_50top','.png', sep=""),
width=2000, height=5000,  # tamaño
res = 350,  # nominal resoluction ppi
)
## numero de vezes que uma variavel apareceu no top 50
ggplot (data= sum_importance, aes(x= reorder(variable, Freq), y= Freq)) +
geom_bar(stat="identity", aes(fill=level)) +
scale_fill_manual("Models", values=c("#ff7bc4", "#2C9B1C", "darkgreen", "#ffae1b", "gray20"),
labels=c("Mosaico_de_Agricultura vs. all", "OFNNF vs. all", "forest vs all",
"Native (Fo., Sa., Gr.)", "All classes (+Mos_Agr., Wat., Pas., Oth.)")) +
coord_flip() +
xlab ("Predictor") +
theme_classic()
dev.off()
# ----------------------------------------------
# PASO 04_2 PLOTEAR ACCURACY
# ----------------------------------------------
# Basado en: https://github.com/mapbiomas-brazil/cerrado (Instituto de Pesquisa Ambiental da Amazônia - IPAM)
#            Dhemerson Conciani (dhemerson.costa@ipam.org.br)
# Adaptado para Mapbiomas Amazonia
# Ajuste: EYTC-IBC-PERU (07/10/2021)
dir()
rm(list=ls())
## load libraries
library (ggplot2)
## define functions outside packages
fun_median <- function(x){
return(data.frame(y=round(median(x), digits=3), label=round(median(x,na.rm=T), digits=3)))
}
## load table
data <- read.table ('4-accuracy-Nvariable/accuracy.txt')
## rename classes aesthetic
data$level <- gsub('all', 'ALL 141', data$level)
data$level <- gsub('TOP50', 'TOP 50', data$level)
data$level <- gsub('TOP40', 'TOP 40', data$level)
data$level <- gsub('TOP30', 'TOP 30', data$level)
data$level <- gsub('TOP20', 'TOP 20', data$level)
data$level <- gsub('TOP10', 'TOP 10', data$level)
data$level <- gsub('TOP5', 'TOP 5', data$level)
## plotar
# x11()
dev.new()
png(file=paste('4-accuracy-Nvariable/','plot_Accuracy_#_variables','.png', sep=""),
width=2000, height=2500,  # tamaño
res = 350,  # nominal resoluction ppi
)
ggplot (data, aes(x=reorder(level, -accuracy), y= accuracy)) +
stat_boxplot(geom = "errorbar", width = 0.2) +
geom_boxplot(outlier.size=-1, fill= "white", alpha=1) +
geom_jitter(alpha=0.02) +
stat_summary(fun= median, geom="line", aes(group=1), col="darkgreen", alpha=0.3, size=1) +
stat_summary(fun= median, geom="point", aes(group=1), col="darkgreen", alpha=0.3, size=1.5) +
stat_summary(fun.data = fun_median, geom="text", vjust=-2, col="darkgreen") +
xlab("Design") + ylab("Accuracy") +
theme_classic()
dev.off()
